<?xml version="1.0" encoding="utf-8"?>
<crescent:Activity xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:crescent="library://cavalier/frameworks/crescent"
				   xmlns:parts="plugins.resources.parts.*"
				   xmlns:cavalier="library://cavalier/frameworks/cavalier"  
				   title="select video clips"
				   icon="@Embed('images/AddToPlaylistActivityIcon.png')" 
				   creationComplete="init()" >
	<fx:Script>
		<![CDATA[
			import frameworks.cavalier.app.controllers.JobController;
			import frameworks.cavalier.app.models.Clip;
			import frameworks.cavalier.app.models.ModelStatus;
			import frameworks.cavalier.app.models.Playlist;
			import frameworks.cavalier.app.models.jobs.CRUDAction;
			import frameworks.cavalier.app.models.jobs.PlaylistJob;
			import frameworks.cavalier.ui.messaging.AlertIndicator;
			import frameworks.cavalier.ui.parts.events.ClipSelectorEvent;
			
			import spark.effects.Animate;
			import spark.effects.animation.MotionPath;
			import spark.effects.animation.SimpleMotionPath;
			
			/**
			 * @public
			 */
			[Bindable]
			public var playlist:Playlist;
			
			/**
			 * @private
			 */
			private function init():void{
				localMessageBus.addEventListener(ClipSelectorEvent.CLIP_SELECTION_CHANGE, onClipSelectionChange, false, 0, true);
			}
			
			/**
			 * @public
			 */
			override public function destroy():void{
				localMessageBus.removeEventListener(ClipSelectorEvent.CLIP_SELECTION_CHANGE, onClipSelectionChange);
				playlist = null;
				
				super.destroy();
			}
			
			/**
			 * @private
			 */
			private function onCalendarButtonClick():void{
				if(calendarList.x == 0)
					return;
				
				var mp:SimpleMotionPath = new SimpleMotionPath("x");
				mp.valueBy = queryGroup.width;
				
				var animate:Animate = new Animate();
				animate.targets = [calendarList, tagList];
				animate.motionPaths = Vector.<MotionPath>([mp]);
				
				animate.play();
			}
			
			/**
			 * @private
			 */
			private function onTagButtonClick():void{
				if(tagList.x == 0)
					return;
				
				var mp:SimpleMotionPath = new SimpleMotionPath("x");
				mp.valueBy = -queryGroup.width;
				
				var animate:Animate = new Animate();
				animate.targets = [calendarList, tagList];
				animate.motionPaths = Vector.<MotionPath>([mp]);
				
				animate.play();
			}
			
			/**
			 * @private
			 */
			private function onClipSelectionChange(evt:ClipSelectorEvent):void{
				if(!playlist)
					return;
				
				// Prevent inserting "pending" clips
				if((evt.selectedItem as Clip).status == ModelStatus.PENDING){
					var alert:AlertIndicator = new AlertIndicator();
					alert.text = "Adding pending clips is not supported";
					alert.show();
					return;
				}
				
				if(selector.list.selectedItems.indexOf(evt.selectedItem) == -1){
					// Remove the item from playlist.clips
					if(playlist.clips.contains(evt.selectedItem))
						playlist.clips.removeItemAt(playlist.clips.getItemIndex(evt.selectedItem));
				}
				else{
					// Add the item into playlist.clips
					if(!playlist.clips.contains(evt.selectedItem))
						playlist.clips.addItem(evt.selectedItem);
				}
				
				// Create an update job
				var job:PlaylistJob = new PlaylistJob();
				job.action = CRUDAction.UPDATE;
				job.payload = playlist;
				job.description = "Playlist [" + playlist.name + "] is set to be updated";
				JobController.jobController.submitJob(job);
			}
			
			/**
			 * @private
			 */
			private function onConfirmClick():void{
				JobController.jobController.commit();
				close();
			}
			
			/**
			 * @private
			 */
			private function onCancelClick():void{
				// Find the job and revert it
				var job:PlaylistJob = JobController.jobController.findJobByPayload(playlist) as PlaylistJob;
				if(job)
					JobController.jobController.cancelJob(job);
				
				close();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:HGroup width="100%" height="100%" gap="15">
		<!-- Options -->
		<s:VGroup width="170" height="100%">
			<crescent:Section title="Options" width="100%">
				<s:VGroup width="100%" paddingTop="25" gap="10">
					<cavalier:Preview source="{playlist.previewUrl}" width="170" height="100"/>
					<s:Label color="#696969" width="100%"
							 text="Selected clips will be added into this playlist"/> 
					<s:Spacer height="15"/>
					<crescent:Button label="Confirm" width="100%" click="onConfirmClick()"/>
					<crescent:RedButton label="Cancel" width="100%" click="onCancelClick()"/>					
				</s:VGroup>
			</crescent:Section>

			<crescent:Section width="100%" height="100%" title="Filters" >
				<s:VGroup paddingTop="25">
					<crescent:RadioButton label="Calendar" groupName="filterGroup" selected="true" click="onCalendarButtonClick()"/>
					<crescent:RadioButton label="Tag" groupName="filterGroup" click="onTagButtonClick()"/>
				</s:VGroup>
			</crescent:Section>
		</s:VGroup>

		<!-- Calendar / Tag list -->
		<s:Group id="queryGroup" width="230" height="100%" clipAndEnableScrolling="true">
			<parts:ClipCalendar id="calendarList" width="100%" height="100%"/>
			<parts:TagListWithClipBadge id="tagList" width="100%" height="100%" x="{queryGroup.width}"/>
		</s:Group>					

		<!-- Clip list -->
		<parts:ClipSelector id="selector" width="100%" height="100%" 
							affectedDomain="local" 
							allowMultipleSelection="true" allowBackgroundToChange="false"/>
						 	
	</s:HGroup>
	
</crescent:Activity>
