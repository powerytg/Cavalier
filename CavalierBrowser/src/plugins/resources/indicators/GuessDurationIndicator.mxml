<?xml version="1.0" encoding="utf-8"?>
<messaging:IndicatorBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
						 xmlns:s="library://ns.adobe.com/flex/spark" 
						 xmlns:messaging="frameworks.cavalier.ui.messaging.*"
						 xmlns:crescent="library://cavalier/frameworks/crescent" 
						 width="100%" height="100%" >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import frameworks.cavalier.messaging.events.IndicatorEvent;
			
			import org.osmf.events.MediaErrorEvent;
			import org.osmf.events.TimeEvent;
			import org.osmf.media.DefaultMediaFactory;
			import org.osmf.media.MediaElement;
			import org.osmf.media.MediaPlayer;
			import org.osmf.media.PluginInfoResource;
			import org.osmf.media.URLResource;
			import org.osmf.smil.SMILPluginInfo;
			
			/**
			 * @private
			 */
			private var smilPlugin:SMILPluginInfo;
			
			/**
			 * @public
			 */
			public var url:String;
			
			/**
			 * @public
			 */
			public var isDVR:Boolean = false;
			
			/**
			 * @private
			 */
			private var timer:Timer;
			
			/**
			 * @public
			 */
			public var maxAllowedGuessingTime:Number = 8000;
			
			/**
			 * @private
			 */
			private var factory:DefaultMediaFactory;
			
			/**
			 * @private
			 */
			private var player:MediaPlayer;
			
			/**
			 * @public
			 */
			public var duration:Number = 0;
			
			/**
			 * @private
			 */
			private function onCancelClick():void{
				close();
			}
			
			/**
			 * @private
			 */
			override protected function onAddedToChrome(evt:IndicatorEvent):void{
				super.onAddedToChrome(evt);
				
				guessDuration();
			}

			/**
			 * @private
			 */
			override protected function onRemovedFromChrome(evt:IndicatorEvent):void{
				super.onRemovedFromChrome(evt);
				clearTimer();
				clearMedia();
			}
			
			/**
			 * @private
			 */
			private function guessDuration():void{
				// Create a factory				
				factory = new DefaultMediaFactory();
				
				// Load necessary built-in plugins
				factory.loadPlugin(new PluginInfoResource(new SMILPluginInfo()));
				
				// Try to load the stream
				var resource:URLResource = new URLResource(url);
				var mediaElement:MediaElement = factory.createMediaElement(resource);
				player = new MediaPlayer(mediaElement);
				player.volume = 0;
				player.autoPlay = true;
				player.addEventListener(MediaErrorEvent.MEDIA_ERROR, onMediaError);
				player.addEventListener(TimeEvent.DURATION_CHANGE, onDurationChange);
				
				// Monitor the timer
				if(timer)
					clearTimer();
				
				timer = new Timer(1000, maxAllowedGuessingTime / 1000);
				timer.addEventListener(TimerEvent.TIMER, onTimer);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);
				timer.start();
			}
			
			/**
			 * @private
			 */
			private function onTimer(evt:TimerEvent):void{
				var nextValue:Number = progress.value + Math.floor(100 / (maxAllowedGuessingTime / 1000));
				progress.value  = Math.min(nextValue, 100);
			}
			
			/**
			 * @private
			 */
			private function onTimerComplete(evt:TimerEvent):void{
				close();
			}
			
			/**
			 * @private
			 */
			private function clearTimer():void{
				if(timer){
					timer.stop();
					timer.removeEventListener(TimerEvent.TIMER, onTimer);
					timer.removeEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);
					timer = null;
				}
			}
			
			/**
			 * @private
			 */
			private function clearMedia():void{
				if(player.playing)
					player.stop();
				
				player.media = null;
				player.removeEventListener(MediaErrorEvent.MEDIA_ERROR, onMediaError);
				player.removeEventListener(TimeEvent.DURATION_CHANGE, onDurationChange);
				player = null;
				factory = null;
			}
			
			/**
			 * @private
			 */
			private function onMediaError(evt:MediaErrorEvent):void{
				close();
			}
			
			/**
			 * @private
			 */
			private function onDurationChange(evt:TimeEvent):void{
				if(evt.time != 0){
					progress.value = 100;
					duration = evt.time;
					close();
				}
			}
			
		]]>
	</fx:Script>
	
	<s:BitmapImage source="@Embed('images/Glow.png')"
				   left="0" right="0" top="0" bottom="0"/>  
	
	<s:BitmapImage source="@Embed('images/Florid.png')" blendMode="overlay"/>  
	
	<s:HGroup width="100%" height="100%"
			  paddingLeft="25" paddingRight="25" verticalAlign="middle">
		<s:Label fontSize="24" text="OSMF is determining duration..."/>
		<s:Spacer width="25"/>
		<crescent:ProgressBar id="progress" value="20" width="350"/>
		<s:HGroup width="100%" horizontalAlign="right">
			<crescent:RedButton id="cancelButton" label="Cancel" width="120" click="onCancelClick()"/>
		</s:HGroup>
	</s:HGroup>
			  
</messaging:IndicatorBase>
