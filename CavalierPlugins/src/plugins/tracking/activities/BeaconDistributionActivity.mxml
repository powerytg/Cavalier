<?xml version="1.0" encoding="utf-8"?>
<crescent:Activity xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:crescent="library://cavalier/frameworks/crescent"
				   title="beacon distribution"
				   icon="@Embed('supportClasses/images/TrackingPolicy.png')"
				   creationComplete="init()" >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import frameworks.cavalier.app.controllers.JobController;
			import frameworks.cavalier.app.controllers.TrackingController;
			import frameworks.cavalier.app.models.BeaconDistributionRule;
			import frameworks.cavalier.app.models.ModelStatus;
			import frameworks.cavalier.app.models.jobs.BeaconDistroRuleJob;
			import frameworks.cavalier.app.models.jobs.CRUDAction;
			
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			
			/**
			 * @private
			 */
			[Bindable]
			private var rules:ArrayCollection;
			
			/**
			 * @private
			 */
			[Bindable]
			private var selectedRule:BeaconDistributionRule;
			
			/**
			 * @private
			 */
			private function init():void{
				if(TrackingController.trackingController.distributionMatrix == null)
					TrackingController.trackingController.getTrackingPolicies(onRulesRetrieved);
				else{
					if(!rules)
						rules = new ArrayCollection();
					
					for each(var rule:BeaconDistributionRule in TrackingController.trackingController.distributionMatrix){
						if(rule.status != ModelStatus.DELETED)
							rules.addItem(rule);
					}
					
					rules.addAll(TrackingController.trackingController.pendingDistributionMatrix);
					TrackingController.trackingController.distributionMatrix.addEventListener(CollectionEvent.COLLECTION_CHANGE, onRuleCollectionChange);
					TrackingController.trackingController.pendingDistributionMatrix.addEventListener(CollectionEvent.COLLECTION_CHANGE, onRuleCollectionChange);
				}
			}
			
			/**
			 * @private
			 */
			private function onRulesRetrieved():void{
				if(!rules)
					rules = new ArrayCollection();
				else if(rules.length != 0)
					return;
				
				for each(var rule:BeaconDistributionRule in TrackingController.trackingController.distributionMatrix){
					if(rule.status  != ModelStatus.DELETED)
						rules.addItem(rule);
				}
				
				rules.addAll(TrackingController.trackingController.pendingDistributionMatrix);
				TrackingController.trackingController.distributionMatrix.addEventListener(CollectionEvent.COLLECTION_CHANGE, onRuleCollectionChange);
				TrackingController.trackingController.pendingDistributionMatrix.addEventListener(CollectionEvent.COLLECTION_CHANGE, onRuleCollectionChange);
			}
			
			/**
			 * @private
			 *
			 */
			private function onRuleCollectionChange(evt:CollectionEvent):void{
				switch(evt.kind){
					case CollectionEventKind.ADD:
						for each(var item:Object in evt.items){
						if(!rules.contains(item) && (item as BeaconDistributionRule).status != ModelStatus.DELETED){
							rules.addItem(item);
						}
					}
						break;
				}
			}
			
			
			/**
			 * @public
			 */
			override public function destroy():void{
				super.destroy();
				
				selectedRule = null;
				
				if(rules){
					rules.removeAll();
					rules = null;
				}
				
				if(TrackingController.trackingController.distributionMatrix)
					TrackingController.trackingController.distributionMatrix.removeEventListener(CollectionEvent.COLLECTION_CHANGE, onRuleCollectionChange);
				if(TrackingController.trackingController.pendingDistributionMatrix)
					TrackingController.trackingController.pendingDistributionMatrix.removeEventListener(CollectionEvent.COLLECTION_CHANGE, onRuleCollectionChange);
			}
			
			/**
			 * @private
			 */
			private function onRuleListChange():void{
				selectedRule = ruleList.selectedItem as BeaconDistributionRule;
			}
			
			/**
			 * @private
			 */
			private function onCommitButtonClick():void{
				JobController.jobController.commit();
			}
			
			/**
			 * @private
			 *
			 */
			private function onAddButtonClick():void{
				var rule:BeaconDistributionRule = new BeaconDistributionRule();
				
				// Give an initial setup
				rule.startPoint = 0;
				rule.endPoint = 100;
				rule.numBeacons = 1;
				
				var job:BeaconDistroRuleJob = new BeaconDistroRuleJob();
				job.action = CRUDAction.CREATE;
				job.payload = rule;
				JobController.jobController.submitJob(job);
				
				selectedRule = rule;
			}
			
			/**
			 * @private
			 */
			private function onDeleteButtonClick():void{
				if(!selectedRule)
					return;
				
				var job:BeaconDistroRuleJob = new BeaconDistroRuleJob();
				job.action = CRUDAction.DELETE;
				job.payload = selectedRule;
				JobController.jobController.submitJob(job);
				
				rules.removeItemAt(rules.getItemIndex(selectedRule));
				selectedRule = null;
			}
			
			/**
			 * @private
			 */
			private function onPropertyChange():void{
				if(!selectedRule)
					return;
				
				var job:BeaconDistroRuleJob = new BeaconDistroRuleJob();
				job.action = CRUDAction.UPDATE;
				job.payload = selectedRule;
				JobController.jobController.submitJob(job);
				
				selectedRule.startPoint = Number(startPointInput.text);
				selectedRule.endPoint = Number(endPointInput.text);
				selectedRule.numBeacons = Number(numBeaconsInput.text);
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup width="100%" height="100%" gap="20">
		<!-- Options -->
		<crescent:Section title="Options" width="230">
			<s:VGroup width="100%" height="100%" paddingTop="25">
				<s:VGroup width="100%" paddingTop="15" paddingBottom="15"
						  verticalAlign="middle" >
					<s:Label text="Rule ID" width="100%"/>
					<crescent:SocketGroup width="200" height="50">
						<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" gap="15">
							<s:Label fontSize="14" color="#cacaca" text="{selectedRule.id}" width="40%" textAlign="center"/>
							<crescent:RoundedOrangeButton label="Delete" width="100%" height="100%" click="onDeleteButtonClick()"/>
						</s:HGroup>			
					</crescent:SocketGroup>									
				</s:VGroup>
				
				<!-- Selected item properties -->
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label width="100%" color="#696969" text="Start Length"/>
					<crescent:TextInput id="startPointInput" width="100%" text="{selectedRule.startPoint}" change="onPropertyChange()"/>
				</s:HGroup>
				
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label width="100%" color="#696969" text="End Length"/>
					<crescent:TextInput id="endPointInput" width="100%" text="{selectedRule.endPoint}" change="onPropertyChange()"/>
				</s:HGroup>
				
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label width="100%" color="#696969" text="Number of Beacons"/>
					<crescent:TextInput id="numBeaconsInput" width="100%" text="{selectedRule.numBeacons}" change="onPropertyChange()"/>
				</s:HGroup>
				
				
				<s:Spacer height="20"/>
				<crescent:Button width="100%" label="Add Entry" click="onAddButtonClick()"/>
				
				<s:Spacer height="20"/>
				<crescent:Button width="100%" label="Commit Changes" click="onCommitButtonClick()"/>
				<crescent:RedButton width="100%" label="Delete Selected" click="onDeleteButtonClick()"/>
			</s:VGroup> 
		</crescent:Section>
		
		<!-- Policies -->
		<crescent:Section title="Distribution Rules" width="100%" height="100%">
			<s:VGroup width="100%" height="100%" paddingTop="25">
				<crescent:List id="ruleList" width="100%" height="100%"
							   dataProvider="{rules}" 
							   itemRenderer="plugins.tracking.activities.supportClasses.BeaconDistributionRuleRenderer"
							   change="onRuleListChange()" >
					<crescent:layout>
						<s:VerticalLayout variableRowHeight="true" gap="15"/>
					</crescent:layout>
				</crescent:List>
			</s:VGroup> 
		</crescent:Section>
		
	</s:HGroup>
	
</crescent:Activity>
