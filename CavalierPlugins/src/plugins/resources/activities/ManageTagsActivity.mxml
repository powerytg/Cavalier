<?xml version="1.0" encoding="utf-8"?>
<crescent:Activity xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:crescent="library://cavalier/frameworks/crescent"
				   title="assign tags"
				   icon="@Embed('images/ManageTagsActivityIcon.png')" 
				   creationComplete="init()" >
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import frameworks.cavalier.app.controllers.JobController;
			import frameworks.cavalier.app.models.ModelStatus;
			import frameworks.cavalier.app.models.Tag;
			import frameworks.cavalier.app.models.jobs.CRUDAction;
			import frameworks.cavalier.app.models.jobs.TagJob;
			import frameworks.cavalier.app.models.sync.Aggregator;
			import frameworks.cavalier.plugin.managers.ShortcutManager;
			import frameworks.crescent.activity.events.ActivityContainerEvent;
			
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			
			/**
			 * @private
			 */
			[Bindable]
			private var selectedTag:Tag;
			
			/**
			 * @private
			 * 
			 * The combined collection that include both existing tags and the pending ones
			 */
			[Bindable]
			private var tags:ArrayCollection;
			
			/**
			 * @private
			 */
			private function init():void{
				if(!tags){
					tags = new ArrayCollection();
					for each(var tag:Tag in Aggregator.aggregator.tags){
						if(tag.status != ModelStatus.DELETED)
							tags.addItem(tag);
					}
					tags.addAll(Aggregator.aggregator.pendingTags);
						
					Aggregator.aggregator.tags.addEventListener(CollectionEvent.COLLECTION_CHANGE, onTagCollectionChange, false, 0, true);
					Aggregator.aggregator.pendingTags.addEventListener(CollectionEvent.COLLECTION_CHANGE, onTagCollectionChange, false, 0, true);
				}
				
			}

			/**
			 * @private
			 *
			 */
			private function onTagCollectionChange(evt:CollectionEvent):void{
				switch(evt.kind){
					case CollectionEventKind.ADD:
						for each(var item:Object in evt.items){
						if(!tags.contains(item) && (item as Tag).status != ModelStatus.DELETED){
							tags.addItem(item);
						}
					}
						break;
					
//					case CollectionEventKind.REMOVE:
//						for each(item in evt.items){
//						if(tags.contains(item))
//							tags.removeItemAt(tags.getItemIndex(item));
//					}
//						break;
					
				}
			}
			
			/**
			 * @private
			 */
			private function onTagListChange():void{
				selectedTag = tagList.selectedItem as Tag;
			}
			
			/**
			 * @private
			 */
			override protected function onActivited(evt:ActivityContainerEvent):void{
				super.onActivited(evt);
				
				if(!tags)
					tags = new ArrayCollection();
				
				if(tags.length != 0)
					tags.removeAll();
				
				for each(var tag:Tag in Aggregator.aggregator.tags){
					if(tag.status != ModelStatus.DELETED)
						tags.addItem(tag);
				}

				tags.addAll(Aggregator.aggregator.pendingTags);
					
				Aggregator.aggregator.tags.addEventListener(CollectionEvent.COLLECTION_CHANGE, onTagCollectionChange, false, 0, true);
				Aggregator.aggregator.pendingTags.addEventListener(CollectionEvent.COLLECTION_CHANGE, onTagCollectionChange, false, 0, true);
			}
			
			/**
			 * @private
			 */
			override protected function onDeactivited(evt:ActivityContainerEvent):void{
				super.onDeactivited(evt);
				tags = null;
				Aggregator.aggregator.tags.removeEventListener(CollectionEvent.COLLECTION_CHANGE, onTagCollectionChange);
				Aggregator.aggregator.pendingTags.removeEventListener(CollectionEvent.COLLECTION_CHANGE, onTagCollectionChange);
			}
			
			/**
			 * @private
			 */
			override public function destroy():void{
				super.destroy();
				tags = null;
				Aggregator.aggregator.tags.removeEventListener(CollectionEvent.COLLECTION_CHANGE, onTagCollectionChange);
				Aggregator.aggregator.pendingTags.removeEventListener(CollectionEvent.COLLECTION_CHANGE, onTagCollectionChange);				
			}
			
			/**
			 * @private
			 */
			private function onCommitButtonClick():void{
				JobController.jobController.commit();
			}
			
			/**
			 * @private
			 */
			private function onDeleteButtonClick():void{
				if(!selectedTag)
					return;
				
				var job:TagJob = new TagJob();
				job.action = CRUDAction.DELETE;
				job.payload = selectedTag;
				JobController.jobController.submitJob(job);

				tags.removeItemAt(tags.getItemIndex(selectedTag));
				selectedTag = null;

			}
			
			/**
			 * @private
			 */
			private function onNewTagButtonClick():void{
				ShortcutManager.shortcutManager.evokeShortcutByClassName("NewTagShortcut");		
			}
			
			/**
			 * @private
			 */
			private function onNameInputChange():void{
				if(!selectedTag)
					return;
				
				var job:TagJob = new TagJob();
				job.action = CRUDAction.UPDATE;
				job.payload = selectedTag;
				JobController.jobController.submitJob(job);
				
				// Update selected job
				selectedTag.name = nameInput.text;
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup width="100%" height="100%" gap="20">
		<crescent:Section title="Options" width="230">
			<s:VGroup width="100%" paddingTop="25">
								
				<crescent:Button width="100%" label="Create New Tag" click="onNewTagButtonClick()"/>
				
				<s:Spacer height="20"/>
				<crescent:Button width="100%" label="Commit Changes" click="onCommitButtonClick()"/>
				<crescent:RedButton width="100%" label="Delete Selected Tag" click="onDeleteButtonClick()"/>
				
				<s:Spacer height="20"/>
				<crescent:SocketGroup width="100%" height="180">
					<s:VGroup verticalCenter="0">
						<s:Label paddingLeft="15" text="Legend"/>
						<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle">
							<s:BitmapImage source="@Embed('plugins/resources/parts/images/HasClip.png')"/>
							<s:Label color="#696969" text="associated with clips"/>
						</s:HGroup>
						
						<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle">
							<s:BitmapImage source="@Embed('plugins/resources/parts/images/HasAd.png')"/>
							<s:Label color="#696969" text="associated with ads"/>
						</s:HGroup>
						
						<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle">
							<s:BitmapImage source="@Embed('plugins/resources/parts/images/HasClipAndAd.png')"/>
							<s:Label color="#696969" text="associated with both"/>
						</s:HGroup>
						
					</s:VGroup>
				</crescent:SocketGroup>

			</s:VGroup>
		</crescent:Section>

		<crescent:Section title="Available Tags" width="100%" height="100%">
			<s:VGroup width="100%" height="100%" paddingTop="25">
				<crescent:List id="tagList" width="100%" height="100%"
							   dataProvider="{tags}"
							   itemRenderer="plugins.resources.parts.supportClasses.TagListRenderer"
							   change="onTagListChange()" /> 
			</s:VGroup>
		</crescent:Section>

		<crescent:Section title="Properties" width="100%">
			<s:Group width="100%" height="100%">
				<s:VGroup width="100%" paddingTop="25" visible="{selectedTag != null}">
					<s:HGroup width="100%" paddingTop="15" paddingBottom="15"
							  verticalAlign="middle" >
						<s:Label text="Tag ID" width="100%"/>
						<crescent:SocketGroup width="200" height="50">
							<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" gap="15">
								<s:Label fontSize="14" color="#cacaca" text="{selectedTag.id}" width="40%" textAlign="center"/>
								<crescent:RoundedOrangeButton label="Delete" width="100%" height="100%" click="onDeleteButtonClick()"/>
							</s:HGroup>			
						</crescent:SocketGroup>									
					</s:HGroup>

					<s:Label fontSize="14" color="#cacaca" text="Name"/>
					<crescent:TextInput id="nameInput" width="100%" text="{selectedTag.name}"
									 	change="onNameInputChange()"	/>
					
					<s:Spacer height="20"/>
					<s:HGroup verticalAlign="middle">
						<crescent:NumericLabel faceColor="#30829a" text="{selectedTag.numClips}"/>
						<s:Label fontSize="14" color="#cacaca" text="Clips have this tag"/>
					</s:HGroup>
					<s:HGroup verticalAlign="middle">
						<crescent:NumericLabel faceColor="#7557c2" text="{selectedTag.numAds}"/>
						<s:Label fontSize="14" color="#cacaca" text="Ads have this tag"/>
					</s:HGroup>
				</s:VGroup>

				<!-- If there's no tag selected -->
				<s:Group width="100%" height="100%" visible="{selectedTag == null}">
					<crescent:SocketGroup width="250" horizontalCenter="0" verticalCenter="0">
						<s:Label text="No Tag Selected" fontSize="18" color="#ffffff"
								 horizontalCenter="0" verticalCenter="0" />
					</crescent:SocketGroup>
				</s:Group>
			</s:Group>
		</crescent:Section>
	</s:HGroup>
	

</crescent:Activity>
